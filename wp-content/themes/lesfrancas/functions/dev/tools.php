<?php
/**
 * Tools functions
 */


/**
 * @param $length
 * @return string
 * Return random number
 * Needs the length in attribut
 */
function randomNumberGenerator($length)
{
    $result = '';
    for ($i = 0; $i < $length; $i++) {
        $result .= mt_rand(0, 9);
    }
    return $result;
}

/**
 * @return mixed
 * Get logo url
 */
function logo_url()
{
    $custom_logo_id = get_theme_mod('custom_logo');
    $image = wp_get_attachment_image_src($custom_logo_id, 'full');
    return $image[0];
}

/**
 * @return string
 * Get Image uri
 */
function img_uri()
{
    $theme_uri = get_template_directory_uri() . '/assets/img/';
    return $theme_uri;
}

/**
 * @return string
 * Get Javascript uri
 */
function js_uri()
{
    $js_uri = get_template_directory_uri() . '/dist/js/';
    return $js_uri;
}

/**
 * @return string
 * Get Stylesheet uri
 */
function css_uri()
{
    $css_uri = get_template_directory_uri() . '/assets/css/';
    return $css_uri;
}

/**
 * @return string
 * Get Fonts uri
 */
function fonts_uri()
{
    $fonts_uri = get_template_directory_uri() . '/assets/fonts/';
    return $fonts_uri;
}

/**
 * @param $file *
 * @param $type of file [application/javascript]
 * @return string
 * Upload and return file name
 */
function cree_upload_file( $file, $type = [ 'image/jpeg', 'image/png', 'image/jpg' ] )
{
    if ( ! function_exists( 'wp_handle_upload' ) ) {
        require_once( ABSPATH . 'wp-admin/includes/file.php' );
    }
    /* check if  type are the same */
    if( in_array( $file['type'], $type ) ){      

        // Gather info for upload function
        $upload_overrides = [
            'test_form' => false
        ];
        $uploadedfile = $file;
        // Uploded the files
        $movefile = wp_handle_upload( $uploadedfile, $upload_overrides );
        //dd($uploadedfile);

        if ( $movefile && ! isset( $movefile['error'] ) ) {
            $extension = substr($movefile['type'], strpos($movefile['type'], "/") + 1);
            $upload['status'] = 'success';
            $upload['file'] = $movefile['file'];
            $upload['url'] = $movefile['url'];
            $upload['type'] = $movefile['type'];  
            $upload['extension'] = $extension;              
            $upload['name'] = preg_replace( '/\.[^.]+$/', '', basename( $movefile['file'] ) );   
        }
        else {
            // Error generated by _wp_handle_upload()
            $upload['status'] = 'error';
            $upload['message'] =  $movefile['error'];
        }        
    }
    else{
        $upload['status'] = 'error';
        $upload['message'] =  'the type of this file isn\'t right';
    }


    return $upload;
}  

/**
 * @param $login_page
 * Redirect to the loginpage if user is not logged
 */
function redirect_if_not_logged( $login_page )
{
    if( ! is_user_logged_in() ){
        wp_redirect( $login_page );
    }
}

/**
 * @param $login_page
 * Redirect to the acount page if user is logged
 */
function redirect_logged( $login_page )
{
    if( is_user_logged_in() ){
        wp_redirect( $login_page );
    }
}

/**
 * @param none for now
 * @return success : object
 * @return fail : string
 * Return Search result
 * Select element by title for the search bar
 */
function cree_search_results()
{
    global $wpdb;
    // Check if the input is empty
    if( isset( $_GET['s'] ) ){
        $query_string = esc_html( $_GET['s'] );
        // Result of the query search
        $sql = "SELECT *
                FROM {$wpdb->prefix}posts
                WHERE
                    ( 
                        post_type = 'post' 
                        OR post_type = 'page'
                        OR post_type = 'q_and_r'
                    )
                    AND 
                    ( 
                        post_title LIKE '%" . $query_string . "%' 
                        OR post_content LIKE '%" . $query_string . "%'
                    )
                    AND 
                    ( 
                        post_status = 'publish' 
                        OR post_status = 'inherit' 
                    )
                    ORDER BY post_date DESC 
                ";
        $query = $wpdb->get_results($sql);

        if( ! empty( $query ) ){
            $count = count($query);
            $results['count'] = $count;
            $results['posts'] = $query;
            $results['query'] = $query_string;
        }
        else{
            $results = 'no result found for <strong>' . $query_string .'</strong>';
        }
    }
    else{
        $results = 'no querie done, you need to fill the search bar';
    }

    return $results;
}



/**
 * @param cree_session *
 * @param inputname *
 * @return $string inputvalue
 * retun the input value if the cree_post exist
 * @require work with the cree_flash function
 */
function input_value( $cree_session, $inputname ){
    if( isset( $cree_session['flash']['cree_post'] ) ) {
        return $cree_session['flash']['cree_post'][$inputname];
    }
}

/**
 * @param status *
 * @param message *
 * @param redirection url *
 * @param post array
 * Put in session the different value as an error handler and redirects 
 */
function cree_flash( $status, $message, $redirect, $post = null ){
    $_SESSION['flash']['cree_post_status'] = $status;
    $_SESSION['flash']['cree_message'] = $message;
    if( $status == 'success' ){
        if( isset( $_SESSION['flash']['cree_post'] ) ){
            unset( $_SESSION['flash']['cree_post'] );
        }
    }else{
        $_SESSION['flash']['cree_post'] = $post;
    }
    wp_redirect( $redirect );
}


/**
 * Breadcrumbs
 */
function custom_breadcrumbs() {
       
    // Settings
    $separator          = '&gt;';
    $breadcrums_id      = 'breadcrumbs';
    $breadcrums_class   = 'breadcrumbs';
    $home_title         = 'Homepage';
      
    // If you have any custom post types with custom taxonomies, put the taxonomy name below (e.g. product_cat)
    $custom_taxonomy    = 'product_cat';
       
    // Get the query & post information
    global $post,$wp_query;
       
    // Do not display on the homepage
    if ( !is_front_page() ) {
       
        // Build the breadcrums
        echo '<ul id="' . $breadcrums_id . '" class="' . $breadcrums_class . '">';
           
        // Home page
        echo '<li class="item-home"><a class="bread-link bread-home" href="' . get_home_url() . '" title="' . $home_title . '">' . $home_title . '</a></li>';
        echo '<li class="separator separator-home"> ' . $separator . ' </li>';
           
        if ( is_archive() && !is_tax() && !is_category() && !is_tag() ) {
              
            echo '<li class="item-current item-archive"><strong class="bread-current bread-archive">' . post_type_archive_title($prefix, false) . '</strong></li>';
              
        } else if ( is_archive() && is_tax() && !is_category() && !is_tag() ) {
              
            // If post is a custom post type
            $post_type = get_post_type();
              
            // If it is a custom post type display name and link
            if($post_type != 'post') {
                  
                $post_type_object = get_post_type_object($post_type);
                $post_type_archive = get_post_type_archive_link($post_type);
              
                echo '<li class="item-cat item-custom-post-type-' . $post_type . '"><a class="bread-cat bread-custom-post-type-' . $post_type . '" href="' . $post_type_archive . '" title="' . $post_type_object->labels->name . '">' . $post_type_object->labels->name . '</a></li>';
                echo '<li class="separator"> ' . $separator . ' </li>';
              
            }
              
            $custom_tax_name = get_queried_object()->name;
            echo '<li class="item-current item-archive"><strong class="bread-current bread-archive">' . $custom_tax_name . '</strong></li>';
              
        } else if ( is_single() ) {
              
            // If post is a custom post type
            $post_type = get_post_type();
              
            // If it is a custom post type display name and link
            if($post_type != 'post') {
                  
                $post_type_object = get_post_type_object($post_type);
                $post_type_archive = get_post_type_archive_link($post_type);
              
                echo '<li class="item-cat item-custom-post-type-' . $post_type . '"><a class="bread-cat bread-custom-post-type-' . $post_type . '" href="' . $post_type_archive . '" title="' . $post_type_object->labels->name . '">' . $post_type_object->labels->name . '</a></li>';
                echo '<li class="separator"> ' . $separator . ' </li>';
              
            }
              
            // Get post category info
            $category = get_the_category();
             
            if(!empty($category)) {
              
                // Get last category post is in
                $last_category = end(array_values($category));
                  
                // Get parent any categories and create array
                $get_cat_parents = rtrim(get_category_parents($last_category->term_id, true, ','),',');
                $cat_parents = explode(',',$get_cat_parents);
                  
                // Loop through parent categories and store in variable $cat_display
                $cat_display = '';
                foreach($cat_parents as $parents) {
                    $cat_display .= '<li class="item-cat">'.$parents.'</li>';
                    $cat_display .= '<li class="separator"> ' . $separator . ' </li>';
                }
             
            }
              
            // If it's a custom post type within a custom taxonomy
            $taxonomy_exists = taxonomy_exists($custom_taxonomy);
            if(empty($last_category) && !empty($custom_taxonomy) && $taxonomy_exists) {
                   
                $taxonomy_terms = get_the_terms( $post->ID, $custom_taxonomy );
                $cat_id         = $taxonomy_terms[0]->term_id;
                $cat_nicename   = $taxonomy_terms[0]->slug;
                $cat_link       = get_term_link($taxonomy_terms[0]->term_id, $custom_taxonomy);
                $cat_name       = $taxonomy_terms[0]->name;
               
            }
              
            // Check if the post is in a category
            if(!empty($last_category)) {
                echo $cat_display;
                echo '<li class="item-current item-' . $post->ID . '"><strong class="bread-current bread-' . $post->ID . '" title="' . get_the_title() . '">' . get_the_title() . '</strong></li>';
                  
            // Else if post is in a custom taxonomy
            } else if(!empty($cat_id)) {
                  
                echo '<li class="item-cat item-cat-' . $cat_id . ' item-cat-' . $cat_nicename . '"><a class="bread-cat bread-cat-' . $cat_id . ' bread-cat-' . $cat_nicename . '" href="' . $cat_link . '" title="' . $cat_name . '">' . $cat_name . '</a></li>';
                echo '<li class="separator"> ' . $separator . ' </li>';
                echo '<li class="item-current item-' . $post->ID . '"><strong class="bread-current bread-' . $post->ID . '" title="' . get_the_title() . '">' . get_the_title() . '</strong></li>';
              
            } else {
                  
                echo '<li class="item-current item-' . $post->ID . '"><strong class="bread-current bread-' . $post->ID . '" title="' . get_the_title() . '">' . get_the_title() . '</strong></li>';
                  
            }
              
        } else if ( is_category() ) {
               
            // Category page
            echo '<li class="item-current item-cat"><strong class="bread-current bread-cat">' . single_cat_title('', false) . '</strong></li>';
               
        } else if ( is_page() ) {
               
            // Standard page
            if( $post->post_parent ){
                   
                // If child page, get parents 
                $anc = get_post_ancestors( $post->ID );
                   
                // Get parents in the right order
                $anc = array_reverse($anc);
                   
                // Parent page loop
                if ( !isset( $parents ) ) $parents = null;
                foreach ( $anc as $ancestor ) {
                    $parents .= '<li class="item-parent item-parent-' . $ancestor . '"><a class="bread-parent bread-parent-' . $ancestor . '" href="' . get_permalink($ancestor) . '" title="' . get_the_title($ancestor) . '">' . get_the_title($ancestor) . '</a></li>';
                    $parents .= '<li class="separator separator-' . $ancestor . '"> ' . $separator . ' </li>';
                }
                   
                // Display parent pages
                echo $parents;
                   
                // Current page
                echo '<li class="item-current item-' . $post->ID . '"><strong title="' . get_the_title() . '"> ' . get_the_title() . '</strong></li>';
                   
            } else {
                   
                // Just display current page if not parents
                echo '<li class="item-current item-' . $post->ID . '"><strong class="bread-current bread-' . $post->ID . '"> ' . get_the_title() . '</strong></li>';
                   
            }
               
        } else if ( is_tag() ) {
               
            // Tag page
               
            // Get tag information
            $term_id        = get_query_var('tag_id');
            $taxonomy       = 'post_tag';
            $args           = 'include=' . $term_id;
            $terms          = get_terms( $taxonomy, $args );
            $get_term_id    = $terms[0]->term_id;
            $get_term_slug  = $terms[0]->slug;
            $get_term_name  = $terms[0]->name;
               
            // Display the tag name
            echo '<li class="item-current item-tag-' . $get_term_id . ' item-tag-' . $get_term_slug . '"><strong class="bread-current bread-tag-' . $get_term_id . ' bread-tag-' . $get_term_slug . '">' . $get_term_name . '</strong></li>';
           
        } elseif ( is_day() ) {
               
            // Day archive
               
            // Year link
            echo '<li class="item-year item-year-' . get_the_time('Y') . '"><a class="bread-year bread-year-' . get_the_time('Y') . '" href="' . get_year_link( get_the_time('Y') ) . '" title="' . get_the_time('Y') . '">' . get_the_time('Y') . ' Archives</a></li>';
            echo '<li class="separator separator-' . get_the_time('Y') . '"> ' . $separator . ' </li>';
               
            // Month link
            echo '<li class="item-month item-month-' . get_the_time('m') . '"><a class="bread-month bread-month-' . get_the_time('m') . '" href="' . get_month_link( get_the_time('Y'), get_the_time('m') ) . '" title="' . get_the_time('M') . '">' . get_the_time('M') . ' Archives</a></li>';
            echo '<li class="separator separator-' . get_the_time('m') . '"> ' . $separator . ' </li>';
               
            // Day display
            echo '<li class="item-current item-' . get_the_time('j') . '"><strong class="bread-current bread-' . get_the_time('j') . '"> ' . get_the_time('jS') . ' ' . get_the_time('M') . ' Archives</strong></li>';
               
        } else if ( is_month() ) {
               
            // Month Archive
               
            // Year link
            echo '<li class="item-year item-year-' . get_the_time('Y') . '"><a class="bread-year bread-year-' . get_the_time('Y') . '" href="' . get_year_link( get_the_time('Y') ) . '" title="' . get_the_time('Y') . '">' . get_the_time('Y') . ' Archives</a></li>';
            echo '<li class="separator separator-' . get_the_time('Y') . '"> ' . $separator . ' </li>';
               
            // Month display
            echo '<li class="item-month item-month-' . get_the_time('m') . '"><strong class="bread-month bread-month-' . get_the_time('m') . '" title="' . get_the_time('M') . '">' . get_the_time('M') . ' Archives</strong></li>';
               
        } else if ( is_year() ) {
               
            // Display year archive
            echo '<li class="item-current item-current-' . get_the_time('Y') . '"><strong class="bread-current bread-current-' . get_the_time('Y') . '" title="' . get_the_time('Y') . '">' . get_the_time('Y') . ' Archives</strong></li>';
               
        } else if ( is_author() ) {
               
            // Auhor archive
               
            // Get the author information
            global $author;
            $userdata = get_userdata( $author );
               
            // Display author name
            echo '<li class="item-current item-current-' . $userdata->user_nicename . '"><strong class="bread-current bread-current-' . $userdata->user_nicename . '" title="' . $userdata->display_name . '">' . 'Author: ' . $userdata->display_name . '</strong></li>';
           
        } else if ( get_query_var('paged') ) {
               
            // Paginated archives
            echo '<li class="item-current item-current-' . get_query_var('paged') . '"><strong class="bread-current bread-current-' . get_query_var('paged') . '" title="Page ' . get_query_var('paged') . '">'.__('Page') . ' ' . get_query_var('paged') . '</strong></li>';
               
        } else if ( is_search() ) {
           
            // Search results page
            echo '<li class="item-current item-current-' . get_search_query() . '"><strong class="bread-current bread-current-' . get_search_query() . '" title="Search results for: ' . get_search_query() . '">Search results for: ' . get_search_query() . '</strong></li>';
           
        } elseif ( is_404() ) {
               
            // 404 page
            echo '<li>' . 'Error 404' . '</li>';
        }
       
        echo '</ul>';
           
    }
       
}